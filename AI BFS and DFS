import sys

class Node():
    def __init__(self, state, parent, action):
        self.state = state   #the current node on which we are 
        self.parent = parent #parent node is the node from which we got to the current node
        self.action = action


class StackFrontier():      #This models the stack frontier where last in is the first to be taken out
    def __init__(self):     #In here we have the stack frontier created
        self.frontier = []  #This stack frontier is just a list but it's currently empty, note that when we've found the goal the frontier is not empty but contains the goal node we have

    def add(self, node):            #This function or method is for adding nodes to the frontier by appending them to the end of the list
        self.frontier.append(node)

    def contains_state(self, state): #This function checks whether the frontier contains any particular state
        return any(node.state == state for node in self.frontier) #This line of code returns true if the current state is in the frontier
    
    def empty(self):  #This method or function checks whether the frontier is empty
        return len(self.frontier) == 0  #It does the checking by finding if the frontier list is empty
       
    def remove(self):
        if self.empty():
            raise Exception("empty frontier")
        else:
            node = self.frontier[-1]           #This list assigns the last element of the list to the variable node
            self.frontier = self.frontier[:-1] #This is the main code in this method which does the removing of the node from the frontier.
            return node                        #self.frontier[:-1] is the code which extracts all the elements of a list except the last element
                                               #The line of code on line 28 updates the list with the previous elements except the last element 

class QueueFrontier(StackFrontier):

    def remove(self):
        if self.empty():
            raise Exception("empty frontier")
        else:
            node = self.frontier[0]
            self.frontier = self.frontier[1:] #This line of code would update the self.frontier list with everything except the first object
            return node  #Note with regard to the queue frontier, since all the other actions to be done on a frontier has been defined as methods in the stack frontier, we would use those methods and only employ the queue frontier's remove method.
    
class Maze():  #This class functions to take a maze and try to solve it

    def __init__(self, filename):

        #Read file and set height and width of maze
        with open(filename) as f: #In place of filename you can actually type the name of your file with the .txt extension
            contents = f.read() #Reads the file and uploads the variable contents with the file contents

        #Validate start and goal
        if contents.count("A") != 1: #This line of code counts the number of "A"s in the text file 
            raise Exception("maze must have exactly one start point") #This line terminates the code when the number of As in textfile is not equal to 1
        if contents.count("B") != 1:
            raise Exception("maze must have exactly one goal")
        
        #Determine height and width of maze
        contents = contents.splitlines()  #This line of code rewrites each row as an element in a list
        self.height = len(contents)
        self.width = max(len(line) for line in contents) #This line runs through the list created and finds the element with the most number of characters 

        #Keep track of walls
        #For the empty list 'row' created a True is appended when the iteration meets any character which is not A,B or " ". Since in the maze text file the only character left is
        #  the hash which represents the wall or any other symbol the user would like to represent a wall
        self.walls = []
        for i in range(self.height):
            row = []
            for j in range(self.width):
                try:
                    if contents[i][j] == "A":
                        self.start = (i,j)
                        row.append(False)
                    elif contents[i][j] == "B":
                        self.goal = (i, j)
                        row.append(False)
                    elif contents[i][j] == " ":
                        row.append(False)
                    else:
                        row.append(True)
                except IndexError:
                    row.append(False)
            self.walls.append(row)

        self.solution = None


    #This function reprints out the maze where an asterisks tells the solution path to the maze
    def print(self):
        solution = self.solution[1] if self.solution is not None else None
        print()
        for i, row in enumerate(self.walls):
            for j, col in enumerate(row):
                if col:
                    print("â–ˆ", end="")
                elif (i, j) == self.start:
                    print("A", end="")
                elif (i, j) == self.goal:
                    print("B", end="")
                elif solution is not None and (i, j) in solution:
                    print("*", end="")
                else:
                    print(" ", end="")
            print()
        print()


    #This function tells the AI algorithm the possible moves which excludes moves into the walls or beyond the height and width of the maze.
    def neighbors(self, state):
        row, col = state
        candidates = [
            ("up", (row - 1, col)),
            ("down", (row + 1, col)),
            ("left", (row, col - 1)),
            ("right", (row, col + 1))
        ]

        result = []
        for action, (r, c) in candidates:
            if 0 <= r < self.height and 0 <= c < self.width and not self.walls[r][c]:
                result.append((action, (r, c)))
        return result
    

    def solve(self):
        """Finds a solution to maze, if one exists."""

        #Keep track of number of states explored
        self.num_explored = 0

        #Initialize frontier to just the starting position
        start = Node(state=self.start, parent=None, action=None)
        frontier = StackFrontier()
        frontier.add(start)

        #Initialize an empty explored set
        self.explored = set()

        #Keep looping until solution found
        while True:

            #If nothing left in frontier, then no path
            if frontier.empty():
                raise Exception("no solution")
            
            #Choose a node from the frontier
            node = frontier.remove()
            self.num_explored += 1

            #If node is the goal, then we have a solution
            if node.state == self.goal:
                actions = []
                cells = []
                while node.parent is not None:
                    actions.append(node.action)
                    cells.append(node.state)
                    node = node.parent
                actions.reverse()
                cells.reverse()
                self.solution = (actions, cells)
                return
            
            #Mark node as explored
            self.explored.add(node.state)

            #Add neighbors to frontier
            for action, state in self.neighbors(node.state):
                if not frontier.contains_state(state) and state not in self.explored:
                    child = Node(state=state, parent=node, action=action)
                    frontier.add(child)


    def output_image(self, filename, show_solution=True, show_explored=False):
        from PIL import Image, ImageDraw
        cell_size = 50
        cell_border = 2

        #Create a blank canvas
        img = Image.new(
            "RGBA",
            (self.width * cell_size, self.height * cell_size),
            "black"
        )
        draw = ImageDraw.Draw(img)

        solution = self.solution[1] if self.solution is not None else None
        for i, row in enumerate(self.walls):
            for j, col in enumerate(row):

                #walls
                if col:
                    fill = (40, 40, 40)

                #Start
                elif(i, j) == self.start:
                    fill = (255, 0, 0)

                #Goal
                elif(i, j) == self.goal:
                    fill = (0, 171, 28)

                #solution
                elif solution is not None and show_solution and (i, j) in solution:
                    fill = (220, 235, 113)

                #Explored
                elif solution is not None and show_explored and (i, j) in self.explored:
                    fill = (212, 97, 85)

                #Empty cell
                else:
                    fill = (237, 240, 252)

                #Draw cell
                draw.rectangle(
                    ([(j * cell_size + cell_border, i * cell_size + cell_border),
                      ((j + 1) * cell_size - cell_border, (i + 1) * cell_size - cell_border)]),
                    fill=fill
                )

        img.save(filename)


if len(sys.argv) != 2:
    sys.exit("Usage: python maze.py maze.txt")

m = Maze(sys.argv[1])
print("Maze:")
m.print()
print("Solving...")
m.solve()
print("States Explored:", m.num_explored)
print("Solution")
m.print()
m.output_image("maze.png", show_explored=True)

    
            
                    
                
